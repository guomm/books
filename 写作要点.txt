首先，这个算法本身是用于计算广义后缀数组的（generalized suffix array），问题抽象为：给定一个字符串集合{T1,T2,..,}计算合成字符串T=T1#1T2#2....的后缀数组。
具体的，我们又可以将问题细分为两类:||Ti||长度相等的情况和||Ti||长度不等的情况。在第一种情况下，可以用一个由多台计算能力相等的工作站组成的分布系统解决。在第二种情况下，（1）可以通过前期处理，将短串合并为长串尽可能达到负载均衡，然后采用前述的分布系统计算；（2）若可用的分布系统中的计算节点的计算能力参差不齐，那么就必须通过作业调度达到负载均衡（给具有低/高计算能力的计算节点分配小/大字符串）。这两种负载均衡的目标都是最大化利用各计算节点的资源，但是采用的方法是不同的，第一种是通过预处理将目标字符串集合划分为多个总长度相若的子集；第二种是实时地根据可用的计算资源分配将目标字符串划分为多个子集（总长度可能相若也可能相差甚远）。
吴裔 13:25:23
在设计实验时，可以考虑比较：总的可用计算资源（内存，硬盘等等）与实际使用计算资源的对比。
吴裔 13:26:29
第二个写作点你已经说过了，理论上，多节点分布系统的总空间和单节点相同，但是单个计算节点的空间应该是1/D倍，D为计算节点格式。
吴裔 13:27:18
你可以考虑一下几个方面设计实验：1）分布系统中的可扩展性体现在其吞吐量与使用的计算节点规模是否呈正比
吴裔 13:27:35
包括，时间，空间
吴裔 13:28:58
2）对于目前实验结果中反映出的负面现象（例如：需要堆叠一定数量的计算能力/节点才能达到或者赶超内存版本），给出实验数据来例证，并在分析后给出解决的方法。